{"version":3,"sources":["Input.js","Output.js","App.js","index.js"],"names":["Input","props","id","type","min","max","this","limitDate","onChange","event","getPhoto","target","value","React","Component","Output","error","loading","icon","faSpinner","size","spin","isVideo","title","altText","src","imgSource","alt","explanation","App","state","dateSelected","baseUrl","apiKey","process","bind","today","Date","year","getFullYear","month","getMonth","date","getDate","limited","setState","inputDate","url","axios","get","then","res","data","media_type","catch","err","href","faGithub","ReactDOM","render","document","getElementById"],"mappings":"gQAEqBA,G,2KACZC,GAAQ,IAAD,OACZ,OACE,6BACE,wBAAIC,GAAG,WAAP,iBACE,0BAAMA,GAAG,eAAT,qDAGF,2BACEC,KAAK,OACLC,IAAI,aACJC,IAAKC,KAAKL,MAAMM,UAChBC,SAAU,SAACC,GAAW,EAAKR,MAAMS,SAASD,EAAME,OAAOC,e,GAZ9BC,IAAMC,Y,eCEpBC,E,qKACZd,GACL,OACE,6BACGK,KAAKL,MAAMe,MACR,wGACA,6BACGV,KAAKL,MAAMgB,QACR,kBAAC,IAAD,CAAiBC,KAAMC,IAAWC,KAAK,KAAKC,MAAI,EAACnB,GAAG,YACpD,6BACGI,KAAKL,MAAMqB,QACR,4BACEC,MAAOjB,KAAKL,MAAMuB,QAClBC,IAAKnB,KAAKL,MAAMyB,YAElB,yBACEC,IAAKrB,KAAKL,MAAMuB,QAChBC,IAAKnB,KAAKL,MAAMyB,YAGtB,uBAAGxB,GAAG,eAAeI,KAAKL,MAAM2B,oB,GApBhBf,IAAMC,W,QCIrBe,E,kDACnB,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXvB,UAAW,GACXwB,cAAc,EACdC,QAAS,sCACTC,OAAQC,2CACRlB,OAAO,EACPC,SAAS,EACTS,UAAW,GACXF,QAAS,GACTF,SAAS,EACTM,YAAa,IAEf,EAAKlB,SAAW,EAAKA,SAASyB,KAAd,gBAdL,E,gEAoBX,IAAMC,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cACbC,EAAQJ,EAAMK,WAAa,EAC3BC,EAAON,EAAMO,UACbC,EAAO,UAAMN,EAAN,YAAcE,EAAQ,GAAK,IAAM,IAAjC,OAAsCA,EAAtC,YAA+CE,GAE5DpC,KAAKuC,SAAS,CAACtC,UAAWqC,M,+BAGnBE,GAAW,IAAD,OAEjB,GAAiB,KAAdA,EAAH,CAEIxC,KAAKwB,MAAMC,cACbzB,KAAKuC,SAAS,CAACd,cAAc,IAG/BzB,KAAKuC,SAAS,CAAC5B,SAAS,IAExB,IAAM8B,EAAMzC,KAAKwB,MAAME,QACnB,YAAc1B,KAAKwB,MAAMG,OACzB,SAAWa,EAEfE,IAAMC,IAAIF,GACPG,MAAK,SAAAC,GACJ,EAAKN,SAAS,CAAC7B,OAAO,IAEK,UAAxBmC,EAAIC,KAAKC,WAAwB,EAAKR,SAAS,CAACvB,SAAQ,IACtD,EAAKuB,SAAS,CAACvB,SAAS,IAE7B,IAAMI,EAAYyB,EAAIC,KAAKL,IAC3B,EAAKF,SAAS,CAACnB,cAEf,IAAMF,EAAU2B,EAAIC,KAAK7B,MACzB,EAAKsB,SAAS,CAACrB,YAEf,IAAMI,EAAcuB,EAAIC,KAAKxB,YAC7B,EAAKiB,SAAS,CAACjB,gBAEf,EAAKiB,SAAS,CAAC5B,SAAS,OAEzBqC,OAAM,SAAAC,GACL,EAAKV,SAAS,CAAC7B,OAAO,U,+BAM1B,OACE,yBAAKd,GAAG,kBACN,yBAAKA,GAAG,gBACN,qDAEA,kBAAC,EAAD,CACEK,UAAWD,KAAKwB,MAAMvB,UACtBG,SAAUJ,KAAKI,WAIfJ,KAAKwB,MAAMC,cACX,kBAAC,EAAD,CACIf,MAAOV,KAAKwB,MAAMd,MAClBC,QAASX,KAAKwB,MAAMb,QACpBK,QAAShB,KAAKwB,MAAMR,QACpBI,UAAWpB,KAAKwB,MAAMJ,UACtBF,QAASlB,KAAKwB,MAAMN,QACpBI,YAAatB,KAAKwB,MAAMF,cAI9B,4BAAQ1B,GAAG,WAAU,IAAImC,MAAOE,cAAhC,4BAA6D,uBAAGiB,KAAK,6CAAR,IAAqD,kBAAC,IAAD,CAAiBtC,KAAMuC,c,GA3FlH5C,IAAMC,WCJvC4C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3b01d2e6.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Input extends React.Component {\n  render(props) {\n    return (\n      <div>\n        <h3 id=\"tooltip\">Select a date:\n          <span id=\"tooltiptext\">Select any date between June 16, 1995 and today.</span>\n        </h3>\n\n        <input\n          type=\"date\"\n          min=\"1995-06-16\"\n          max={this.props.limitDate}\n          onChange={(event) => {this.props.getPhoto(event.target.value)}}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default class Output extends React.Component {\n  render(props) {\n    return (\n      <div>\n        {this.props.error\n          ? <p> There was an error loading this date's data. Please choose another date.</p>\n          : <div>\n              {this.props.loading \n                ? <FontAwesomeIcon icon={faSpinner} size=\"6x\" spin id=\"spinner\"/>\n                : <div>\n                    {this.props.isVideo\n                      ? <iframe\n                          title={this.props.altText}\n                          src={this.props.imgSource}\n                        ></iframe>\n                      : <img\n                          alt={this.props.altText}\n                          src={this.props.imgSource}\n                        />\n                    }\n                    <p id=\"explanation\">{this.props.explanation}</p>\n                  </div>\n              }\n            </div>\n        }\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport './styles.css';\nimport Input from './Input';\nimport Output from './Output';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default class App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      limitDate: '',\n      dateSelected: false,\n      baseUrl: 'https://api.nasa.gov/planetary/apod',\n      apiKey: process.env.REACT_APP_API_KEY,\n      error: false,\n      loading: false,\n      imgSource: '',\n      altText: '',\n      isVideo: false,\n      explanation: ''\n    };\n    this.getPhoto = this.getPhoto.bind(this);\n  }\n\n  componentDidMount() {\n    // Need to convert today's date to right\n    // format for max date on input field\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = today.getMonth() + 1;\n    const date = today.getDate();\n    const limited = `${year}-${month < 10 ? '0' : ''}${month}-${date}`;\n\n    this.setState({limitDate: limited});\n  }\n\n  getPhoto(inputDate){\n    // Do not call API if date input is cleared \n    if(inputDate === '') return;\n\n    if(!this.state.dateSelected){\n      this.setState({dateSelected: true});\n    }\n\n    this.setState({loading: true});\n\n    const url = this.state.baseUrl +\n        '?api_key=' + this.state.apiKey +\n        '&date=' + inputDate;\n    \n    axios.get(url)\n      .then(res => {\n        this.setState({error: false});\n\n        if(res.data.media_type === 'video') this.setState({isVideo:true});\n        else this.setState({isVideo: false});\n\n        const imgSource = res.data.url;\n        this.setState({imgSource});\n\n        const altText = res.data.title;\n        this.setState({altText});\n\n        const explanation = res.data.explanation;\n        this.setState({explanation});\n\n        this.setState({loading: false});\n      })\n      .catch(err => {\n        this.setState({error: true});\n      })\n\n  }\n\n  render() {\n    return (\n      <div id=\"page-container\">\n        <div id=\"content-wrap\">\n          <h1>NASA Photo of the Day</h1>\n          \n          <Input\n            limitDate={this.state.limitDate}\n            getPhoto={this.getPhoto}\n          />\n\n{/* Only load the output when an initial date has been selected */}\n          { this.state.dateSelected &&    \n            <Output\n                error={this.state.error}\n                loading={this.state.loading}\n                isVideo={this.state.isVideo}\n                imgSource={this.state.imgSource}\n                altText={this.state.altText}\n                explanation={this.state.explanation}\n              />\n          }\n\n          <footer id=\"footer\">{new Date().getFullYear()} — ThinkTink — <a href='https://github.com/ThinkTink/NASAPhotoAPI'> <FontAwesomeIcon icon={faGithub} /></a></footer>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}